/**
 * Kodin.Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ChallengeDefinitionReaderModelContractPagedResult } from '../model/models';
import { ChallengeDefinitionState } from '../model/models';
import { ChallengeReaderModelContractPagedResult } from '../model/models';
import { QuestionReaderModelContractPagedResult } from '../model/models';
import { QuestionType } from '../model/models';
import { QuizDefinitionReaderModelContractPagedResult } from '../model/models';
import { QuizItemReaderModelContractPagedResult } from '../model/models';
import { QuizReaderModelContractPagedResult } from '../model/models';
import { RepositoryReaderModelContractPagedResult } from '../model/models';
import { RepositoryState } from '../model/models';
import { ReviewReaderModelContractPagedResult } from '../model/models';
import { SessionReaderModelContractPagedResult } from '../model/models';


import { KodinApiConfiguration }                                     from '../kodin.api.configuration';



export interface GetAllEndPointServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: KodinApiConfiguration;

    /**
     *
     *
     * @param id
     * @param title
     * @param state
     * @param withLimit
     * @param levelId
     * @param skillsId
     * @param topicsId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    challengeDefinitionsGet(id?: string, title?: string, state?: ChallengeDefinitionState, withLimit?: boolean, levelId?: string, skillsId?: Array<string>, topicsId?: Array<string>, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<ChallengeDefinitionReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param challengeDefinitionId
     * @param userId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    challengesGet(id?: string, challengeDefinitionId?: string, userId?: string, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<ChallengeReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param title
     * @param questionType
     * @param withLimit
     * @param language
     * @param questionCategoryId
     * @param levelId
     * @param skillsId
     * @param topicsId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    questionsGet(id?: string, title?: string, questionType?: QuestionType, withLimit?: boolean, language?: string, questionCategoryId?: string, levelId?: string, skillsId?: Array<string>, topicsId?: Array<string>, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<QuestionReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param title
     * @param language
     * @param levelId
     * @param skillsId
     * @param topicsId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    quizDefinitionsGet(id?: string, title?: string, language?: string, levelId?: string, skillsId?: Array<string>, topicsId?: Array<string>, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<QuizDefinitionReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param quizDefinitionId
     * @param userId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    quizzesGet(id?: string, quizDefinitionId?: string, userId?: string, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<QuizReaderModelContractPagedResult>;

    /**
     *
     *
     * @param quizId
     * @param id
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    quizzesQuizIdQuizItemsGet(quizId: string, id?: string, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<QuizItemReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param name
     * @param url
     * @param fork
     * @param state
     * @param userId
     * @param developmentEnvironmentId
     * @param levelId
     * @param skillsId
     * @param topicsId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    repositoriesGet(id?: string, name?: string, url?: string, fork?: boolean, state?: RepositoryState, userId?: string, developmentEnvironmentId?: string, levelId?: string, skillsId?: Array<string>, topicsId?: Array<string>, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<RepositoryReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param userId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    reviewsGet(id?: string, userId?: string, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<ReviewReaderModelContractPagedResult>;

    /**
     *
     *
     * @param id
     * @param userId
     * @param page
     * @param limit
     * @param q
     * @param orders
     */
    sessionsGet(id?: string, userId?: string, page?: number, limit?: number, q?: string, orders?: Array<string>, extraHttpRequestParams?: any): Observable<SessionReaderModelContractPagedResult>;

}
